"""
NumPy多维数组操作与矩阵乘法详解

本文件演示NumPy库中多维数组的基本操作和矩阵乘法运算，
这些操作是神经网络计算的基础。
"""

import numpy as np

# ================= 一维数组操作 =================
# 创建一维数组
A = np.array([1, 2, 3, 4])
print("一维数组A:", A)

# 获取数组维度
print("A的维度数:", np.ndim(A))  # 输出: 1 (一维数组)  数组的维数可以通过np.dim()函数获得

# 获取数组形状
print("A的形状:", A.shape)      # 输出: (4,) 表示4个元素的一维数组 数组的形状可以通过实例变量shape获得
print("第一个维度的元素个数:", A.shape[0])  # 输出: 4

# ================= 二维数组操作 =================
# 创建二维数组（3行2列）
B = np.array([[1, 2], [3, 4], [5, 6]])
print("\n二维数组B:")
print(B)

# 获取二维数组维度和形状
print("B的维度数:", np.ndim(B))  # 输出: 2 (二维数组)
print("B的形状:", B.shape)      # 输出: (3, 2) 表示3行2列

# ================= 矩阵乘法基础 =================
"""
在矩阵的乘积运算中，对应维度的元素个数要保持一致
矩阵乘法规则:
  两个矩阵A和B可以相乘的条件：
      A的列数必须等于B的行数
  结果矩阵C的形状为：C.shape = (A的行数, B的列数)
"""

# 创建两个2x2矩阵
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

print("\n矩阵A:")
print(A)
print("矩阵B:")
print(B)

# 计算矩阵点积（矩阵乘法）
# 使用np.dot()函数
print("\nA和B的点积:")
print(np.dot(A, B)) # 它们的乘积可以通过NumPy的np.dot()函数计算（乘积也称为点积）
"""
计算过程:
  [1 * 5 + 2 * 7, 1 * 6 + 2 * 8] = [5+14, 6+16] = [19, 22]
  [3 * 5 + 4 * 7, 3 * 6 + 4 * 8] = [15+28, 18+32] = [43, 50]
输出:
  [[19 22]
   [43 50]]
"""

# ================= 非方阵矩阵乘法 =================
# 创建2x3矩阵
A = np.array([[1, 2, 3], [4, 5, 6]])
# 创建3x2矩阵
B = np.array([[1, 2], [3, 4], [5, 6]])

print("\n非方阵乘法:")
print("A的形状:", A.shape)  # (2, 3)
print("B的形状:", B.shape)  # (3, 2)
print("A·B的结果:")
print(np.dot(A, B))  # 结果将是2x2矩阵
"""
计算过程:
  第一行: [1 * 1+2 * 3+3 * 5, 1 * 2+2 * 4+3 * 6] = [1+6+15, 2+8+18] = [22, 28]
  第二行: [4 * 1+5 * 3+6 * 5, 4 * 2+5 * 4+6 * 6] = [4+15+30, 8+20+36] = [49, 64]
输出:
  [[22 28]
   [49 64]]
"""

# ================= 维度不匹配示例 =================
"""
# 尝试计算不匹配维度的矩阵乘法
C = np.array([[1, 2], [3, 4]])  # 2x2矩阵
print("C的形状:", C.shape)      # (2, 2)
print("A的形状:", A.shape)      # (2, 3)

# 下面这行会报错，因为A有3列而C只有2行
# np.dot(A, C)
错误信息:
  ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
"""

# ================= 矩阵与向量乘法 =================
# A是二维矩阵、B是一维数组时，也要保持对应维度的元素个数一致
# 创建3x2矩阵
A = np.array([[1, 2], [3, 4], [5, 6]])
# 创建一维向量 (实际上是(2,)形状)
B = np.array([7, 8])

print("\n矩阵与向量乘法:")
print("A的形状:", A.shape)  # (3, 2)
print("B的形状:", B.shape)  # (2,)
print("A·B的结果:")
print(np.dot(A, B))  # 结果将是3元素向量
"""
计算过程:
  第一行: 1 * 7 + 2 * 8 = 7+16 = 23
  第二行: 3 * 7 + 4 * 8 = 21+32 = 53
  第三行: 5 * 7 + 6 * 8 = 35+48 = 83
输出:
  [23 53 83]
"""

# ================= 神经网络中的矩阵乘法 =================
"""
在神经网络中:
  X: 输入向量 (1xN)
  W: 权重矩阵 (NxM)
  Y: 输出向量 (1xM)
公式:
  Y = X · W
"""

# 输入向量 (1x2)
X = np.array([1, 2])
# 权重矩阵 (2x3)
W = np.array([[1, 2, 3], [4, 5, 6]])

print("\n神经网络内积计算:")
print("输入X:", X)
print("权重W:")
print(W)
print("输出Y = X·W:")
Y = np.dot(X, W)
print(Y)  # 输出: [1 * 1+2 * 4, 1 * 2+2 * 5, 1 * 3+2 * 6] = [1+8, 2+10, 3+12] = [9, 12, 15]

"""
神经网络计算关键点:
  1. 输入向量X表示单个样本的特征
  2. 权重矩阵W的每一列对应一个神经元的权重
  3. 输出向量Y的每个元素对应一个神经元的激活值
  4. 这种矩阵运算可以高效处理批量数据
"""