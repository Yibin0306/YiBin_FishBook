# ===== 全连接层的问题 =====
"""
全连接层(Fully Connected Layer)的局限性：
  - 忽视输入数据的空间结构（形状信息）
  - 将全部输入数据视为同一维度的神经元
  - 无法有效利用图像的空间相关性
  - 导致参数数量爆炸（如224x224图像输入FC层需150,528权重）

CNN解决方案：
  - 引入特征图(feature map)概念
  - 输入特征图(input feature map)：卷积层的输入数据
  - 输出特征图(output feature map)：卷积层的输出数据
"""

# 卷积运算
"""
将各个位置上滤波器的元素和输入的对应元素相乘，
然后再求和（有时将这个计算称为乘积累加运算）。
然后，将这个结果保存到输出的对应位置。
"""

# 填充
"""
在进行卷积层的处理之前，有时要向输入数据的周围填入固定的数据（比如0等），这称为填充（padding）
使用填充主要是为了调整输出的大小。

填充(Padding)目的：
  - 调整输出特征图尺寸
  - 保持空间分辨率
  - 防止边缘信息丢失
"""

# 步幅
"""
应用滤波器的位置间隔称为步幅（stride）。
综上，增大步幅后，输出大小会变小。而增大填充后，输出大小会变大。

假设输入大小为(H,W)，滤波器大小为(FH,FW)，输出大小为(OH,OW)，
填充为P，步幅为S。此时，输出大小可通过以下进行计算。
OH = (H + 2P - FH) / S + 1
OW = (W + 2P - FW) / S + 1

步幅(Stride)作用：
  - 控制特征图降采样速率
  - 减少计算量
  - 增大感受野
"""

# 3维数据的卷积运算
"""
通道方向上有多个特征图时，会按通道进行输入数据和滤波器的卷积运算，并将结果相加，从而得到输出。
在3维数据的卷积运算中，输入数据和滤波器的通道数要设为相同的值。

3D数据卷积特点：
  - 输入数据形状: (通道C, 高度H, 宽度W)
  - 卷积核形状: (输入通道C, 高度FH, 宽度FW)
  - 运算规则: 按通道进行卷积运算并求和
"""

# 结合方块思考
"""
把3维数据表示为多维数组时，书写顺序为（channel, height, width）。
比如，通道数为C、高度为H、长度为W的数据的形状可以写成（C,H,W）。
滤波器也一样，要按（channel, height, width）的顺序书写。
比如，通道数为C、滤波器高度为FH（Filter Height）、长度为FW（Filter Width）时，可以写成（C,FH,FW）

作为4维数据，滤波器的权重数据要按(output_channel,input_ channel, height, width)的顺序书写。
比如，通道数为3、大小为5×5的滤波器有20个时，可以写成(20,3,5,5)。

示例:
  输入: (3, 32, 32)  # 3通道32x32图像
  卷积核: (16, 3, 3, 3)  # 16个3x3滤波器，处理3通道输入
  输出: (16, 30, 30)  # 16通道30x30特征图
"""

# 批处理
"""
在各个数据的开头添加了批用的维度。批处理将N次的处理汇总成了1次进行。

批处理优势：
  - 提高计算效率（并行处理）
  - 稳定梯度更新
  - 提供正则化效果K
"""