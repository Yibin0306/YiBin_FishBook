# NumPy 基础操作示例

# 导入NumPy库，并赋予别名np（标准做法）
import numpy as np

# === 创建NumPy数组 ===
# 创建一维数组
x = np.array([1.0, 2.0, 3.0])  # 包含3个浮点数的数组
y = np.array([2.0, 4.0, 6.0])  # 另一个包含3个浮点数的数组

# === 数组的基本运算 ===
# 逐元素加法
print(x + y)  # 输出: [3. 6. 9.]
# 逐元素减法
print(x - y)  # 输出: [-1. -2. -3.]
# 逐元素乘法
print(x * y)  # 输出: [ 2.  8. 18.]
# 逐元素除法
print(x / y)  # 输出: [0.5 0.5 0.5]
# 标量与数组的运算（广播机制）
print(x / 2.0)  # 输出: [0.5 1.  1.5]

# === N维数组操作 ===
# 创建二维数组（矩阵）
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(A)  # 输出整个矩阵
# 打印数组形状（维度）
print(A.shape)  # 输出: (3, 3) 表示3行3列
# 打印数组数据类型
print(A.dtype)  # 输出: int32 或 int64（取决于系统）

# 创建另一个矩阵
B = np.array([[1, 2, 0], [4, 0, 6], [0, 8, 9]])
# 矩阵逐元素加法
print(A + B)  # 输出对应位置元素之和
# 矩阵逐元素乘法
print(A * B)  # 输出对应位置元素之积（不是矩阵乘法）
# 矩阵与标量的乘法（广播机制）
print(A * 10)  # 每个元素乘以10

"""NumPy数组（np.array）可以生成N维数组，即可以生成一维数组、
二维数组、三维数组等任意维数的数组。数学上将一维数组称为向量，
将二维数组称为矩阵。另外，可以将一般化之后的向量或矩阵等统
称为张量（tensor）。本书基本上将二维数组称为“矩阵”，将三维数
组及三维以上的数组称为“张量”或“多维数组”"""

# 广播
"""
[[1 2 3]
 [4 5 6]   *  10
 [7 8 9]]
NumPy中，形状不同的数组之间也可以进行运算。之前的例子中，在2×2的矩阵A和标量10之间进行了乘法运算。
在这个过程中，标量10被扩展成了2×2的形状，然后再与矩阵A进行乘法运算。这个巧妙的功能称为广播（broadcast）。
"""

C = np.array([[1, 2], [3, 4]])
D = np.array([[10, 20]])  # 1x2数组
print(C * D)  # D被广播为2x2数组：[[10,20],[10,20]]

# === 数组元素访问 ===
# 创建一个二维数组
x = np.array([[51, 55], [14, 19], [0, 4]])
print(x)  # 输出整个数组

# 访问第一行
print(x[0])  # 输出: [51, 55]
# 访问第一行第二列的元素
print(x[0][1])  # 输出: 55 (等价于x[0,1])

# 使用for循环遍历每一行
for row in x:
    print(row)  # 每次迭代输出一行

# 将多维数组展平为一维数组
x_flat = x.flatten()
print(x_flat)  # 输出: [51, 55, 14, 19, 0, 4]

# 通过索引数组访问特定元素
selected = x_flat[np.array([0, 2, 4])]  # 选择索引为0、2、4的元素
print(selected)  # 输出: [51, 14, 0]

# === 布尔索引 ===
# 创建条件数组（布尔数组）
condition = x > 15  # 检查哪些元素大于15
print(condition)  # 输出布尔值矩阵

# 使用布尔索引提取满足条件的元素
filtered = x[x > 15]  # 获取所有大于15的元素
print(filtered)  # 输出: [51, 55, 19]

"""
性能说明：
NumPy的核心运算使用C/C++实现，因此：
1. 比纯Python循环快得多（尤其在处理大型数组时）
2. 提供简洁高效的语法
3. 支持向量化操作（避免显式循环）
"""

"""
np.array()和np.arange()的区别

np.array()：转换器
将现有数据（列表/元组等）转换为NumPy数组
→ 输入：[1, 2, 3] → 输出：array([1,2,3])

np.arange()：生成器
自动生成数值序列（类似range()的数组版）
→ 输入：(开始, 结束, 步长) → 输出：array([0,1,2,...])

np.array()是数据容器构造器，np.arange()是数值序列生成器。
"""