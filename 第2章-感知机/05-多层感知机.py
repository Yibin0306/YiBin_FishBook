"""
感知机实现基础逻辑门与多层神经网络
实现内容：
  1. 单层感知机：AND/NAND/OR门
  2. 多层感知机：XOR门（异或门）
关键概念：
  - 单层感知机只能解决线性可分问题
  - 多层感知机可解决非线性问题
  - 层数定义：从输入到输出的计算路径
"""

import numpy as np


# ================= 单层感知机实现 =================

def AND(x1, x2):
    """
    AND门（与门）实现
    功能：仅当两个输入均为1时输出1
    参数: x1, x2 (二进制输入 0/1)
    返回: 0 或 1
    原理：单层感知机，线性决策边界
    """
    # 权重参数
    w1, w2 = 0.5, 0.5
    # 阈值（临界值）
    theta = 0.7

    # 计算加权输入总和
    tmp = w1 * x1 + w2 * x2

    # 根据阈值判断输出
    if tmp <= theta:
        return 0  # 加权和≤阈值 → 0
    elif tmp > theta:
        return 1  # 加权和＞阈值 → 1


def NAND(x1, x2):
    """
    NAND门（与非门）实现
    功能：与AND门相反，仅当两个输入均为1时输出0
    参数: x1, x2 (二进制输入 0/1)
    返回: 0 或 1
    原理：单层感知机，线性决策边界
    """
    x = np.array([x1, x2])
    # 权重取负值，偏置取正值（与AND门相反）
    w = np.array([-0.5, -0.5])
    b = 0.7  # 正偏置

    tmp = np.sum(w * x) + b
    if tmp <= 0:
        return 0
    else:
        return 1  # 双输入为1时tmp= -0.5 * 1 + -0.5 * 1 + 0.7 = -0.3 < 0 → 0


def OR(x1, x2):
    """
    OR门（或门）实现
    功能：任一输入为1时输出1
    参数: x1, x2 (二进制输入 0/1)
    返回: 0 或 1
    原理：单层感知机，线性决策边界
    """
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5])
    b = -0.2  # 较小的负偏置，降低激活阈值

    tmp = np.sum(w * x) + b
    if tmp <= 0:
        return 0
    else:
        return 1  # 任一输入为1时加权和>0


# ================= 多层感知机实现异或门 =================

def XOR(x1, x2):
    """
    XOR门（异或门）实现
    功能：两个输入不同时输出1（相同为0，不同为1）
    参数: x1, x2 (二进制输入 0/1)
    返回: 0 或 1
    原理：2层感知机网络
        第0层（输入层）：x1, x2
        第1层（隐藏层）：s1(NAND), s2(OR)
        第2层（输出层）：AND(s1, s2)

    数学表达式：
        XOR(x1,x2) = AND(NAND(x1,x2), OR(x1,x2))
    """
    s1 = NAND(x1, x2)  # 第一层计算：与非门
    s2 = OR(x1, x2)  # 第一层计算：或门（并行）
    y = AND(s1, s2)  # 第二层计算：与门
    return y


# ================= 测试验证 =================
if __name__ == "__main__":
    print("XOR门真值表验证:")
    print(f"输入(0,0) → {XOR(0, 0)} (应为0)")
    print(f"输入(0,1) → {XOR(0, 1)} (应为1)")
    print(f"输入(1,0) → {XOR(1, 0)} (应为1)")
    print(f"输入(1,1) → {XOR(1, 1)} (应为0)")

    """
    运行结果应显示:
        XOR门真值表验证:
        输入(0,0) → 0 (应为0)
        输入(0,1) → 1 (应为1)
        输入(1,0) → 1 (应为1)
        输入(1,1) → 0 (应为0)
    """

"""
多层感知机关键说明：
1. 层数定义：
   - 输入层：第0层（原始输入x1,x2）
   - 隐藏层：第1层（s1,s2中间结果）
   - 输出层：第2层（最终输出y）

2. 解决非线性问题能力：
   单层感知机 → 只能生成线性决策边界
   双层感知机 → 可以生成非线性决策边界（如XOR所需的区域分割）
"""