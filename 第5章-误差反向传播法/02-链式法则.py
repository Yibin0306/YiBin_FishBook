# 计算图的反向传播
"""
计算图的反向传播：沿着与正方向相反的方向，乘上局部导数

## 核心概念总结
1. **反向传播本质**：沿计算图反向传递梯度，利用链式法则计算每个节点的参数梯度
2. **核心操作**：从输出端开始，每个节点将接收到的梯度乘以局部导数后传递给输入节点

### 数学基础
- **链式法则**：复合函数求导法则，f(g(x))' = f'(g(x)) * g'(x)
- **梯度累加**：当节点有多个输出路径时，梯度值为各路径回传梯度之和

### 计算节点类型
| 节点类型   | 前向计算        | 局部导数                  | 反向传播操作               |
|------------|----------------|--------------------------|---------------------------|
| 加法节点   | z = x + y      | ∂z/∂x=1, ∂z/∂y=1        | 梯度直接分发(∇x=∇z, ∇y=∇z) |
| 乘法节点   | z = x * y      | ∂z/∂x=y, ∂z/∂y=x        | 梯度交叉相乘(∇x=∇z*y, ∇y=∇z*x) |
| Sigmoid    | σ(x)=1/(1+e^{-x}) | ∂σ/∂x=σ(1-σ)           | ∇x = ∇σ * σ(1-σ)          |
| ReLU       | max(0,x)       | ∂y/∂x=1(x>0) else 0     | 梯度门控(∇x=∇y if x>0 else 0) |

### 实现步骤
1. **前向传播**：构建计算图并记录中间变量
2. **初始化梯度**：输出节点梯度设为 ∂L/∂output=1.0
3. **反向遍历**：按拓扑逆序访问节点
4. **梯度计算**：对每个节点：
   - 获取输出梯度 ∇out
   - 计算输入梯度 ∇in = ∇out * 局部导数
   - 将梯度传递给输入节点
5. **参数更新**：收集所有权重节点的梯度进行优化
"""